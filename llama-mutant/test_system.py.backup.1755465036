#!/usr/bin/env python3
"""
Test System - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LLAMA-MUTANT
"""

import os
import sys
import time
import subprocess
from pathlib import Path

def print_header(title):
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*60)
    print(f"üß™ {title}")
    print("="*60)

def print_success(message):
    """–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"‚úÖ {message}")

def print_error(message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print(f"‚ùå {message}")

def print_info(message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"‚ÑπÔ∏è {message}")

def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    try:
        python_version = subprocess.check_output(['python3', '--version'], text=True).strip()
        print_success(f"Python: {python_version}")
    except:
        print_error("Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    try:
        pip_version = subprocess.check_output(['pip3', '--version'], text=True).strip()
        print_success(f"Pip: {pip_version}")
    except:
        print_error("Pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    model_path = "model/Meta-Llama-3.2-1B-Instruct-Q4_K_M.gguf"
    if os.path.exists(model_path):
        size = os.path.getsize(model_path)
        print_success(f"–ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {size / (1024*1024):.1f} MB")
    else:
        print_error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Llama
    llama_path = "bin/llama"
    if os.path.exists(llama_path):
        print_success("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Llama –Ω–∞–π–¥–µ–Ω")
    else:
        print_error(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Llama –Ω–µ –Ω–∞–π–¥–µ–Ω: {llama_path}")
        return False
    
    return True

def test_python_modules():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –º–æ–¥—É–ª–µ–π"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –º–æ–¥—É–ª–µ–π")
    
    modules = ['ai_core', 'autonomous_ai', 'llama_integration']
    
    for module in modules:
        try:
            __import__(module)
            print_success(f"–ú–æ–¥—É–ª—å {module} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            print_error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module}: {e}")
            return False
    
    return True

def test_ai_core():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Core"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Core")
    
    try:
        from ai_core import AICore
        
        ai = AICore()
        print_success("AI Core –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        status = ai.get_status()
        print_success(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status['name']} v{status['version']}")
        
        thoughts = ai.think("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print_success("–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        fs_info = ai.explore_filesystem(".")
        print_success(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {len(fs_info.get('files', []))} —Ñ–∞–π–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –≤ AI Core: {e}")
        return False

def test_autonomous_ai():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    try:
        from autonomous_ai import AutonomousAI
        
        ai = AutonomousAI()
        print_success("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        status = ai.get_status()
        print_success(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {status['scheduled_tasks']} –∑–∞–¥–∞—á")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        return False

def test_llama_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama")
    
    try:
        from llama_integration import LlamaIntegration
        
        integration = LlamaIntegration()
        print_success("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Llama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        response, needs_execution = integration.process_user_input("/ai_help")
        print_success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        commands = integration.extract_commands("–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É: `ls -la`")
        print_success(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥: –Ω–∞–π–¥–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama: {e}")
        return False

def test_file_permissions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    
    files_to_check = [
        "run_advanced.sh",
        "run.sh",
        "bin/llama"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            if os.access(file_path, os.X_OK):
                print_success(f"{file_path} - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
            else:
                print_error(f"{file_path} - –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
                print_info(f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ: chmod +x {file_path}")
        else:
            print_error(f"{file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def test_system_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    
    try:
        from ai_core import AICore
        ai = AICore()
        
        # –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        result = ai.execute_command("pwd")
        if result["success"]:
            print_success("–ö–æ–º–∞–Ω–¥–∞ pwd –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pwd: {result['error']}")
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        result = ai.execute_command("rm /tmp/test")
        if not result["success"] and "–∑–∞–ø—Ä–µ—â–µ–Ω–∞" in result["error"]:
            print_success("–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print_error("–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
        return False

def run_integration_test():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print_header("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
    
    try:
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        print_info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...")
        
        from autonomous_ai import AutonomousAI
        ai = AutonomousAI()
        ai.start()
        
        time.sleep(10)
        
        status = ai.get_status()
        print_success(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–ª: {status['active_threads']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
        
        ai.stop()
        print_success("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("LLAMA-MUTANT v2.0 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    
    tests = [
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("Python –º–æ–¥—É–ª–∏", test_python_modules),
        ("AI Core", test_ai_core),
        ("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º", test_autonomous_ai),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Llama", test_llama_integration),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", test_file_permissions),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", test_system_commands),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", run_integration_test)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print_error(f"–¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print_header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if passed == total:
        print_success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print_info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./run_advanced.sh")
    else:
        print_error(f"‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
        print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)