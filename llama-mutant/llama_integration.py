#!/usr/bin/env python3
"""
Llama Integration Module - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É Llama –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –ò–ò
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ò–ò –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

import os
import sys
import re
import json
import time
from typing import Dict, List, Optional, Tuple
import logging

from ai_core import AICore

class LlamaIntegration:
    def __init__(self):
        self.ai_core = AICore()
        self.command_history = []
        self.last_command_time = time.time()
        self.command_cooldown = 1.0  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò
        self.ai_commands = {
            '/ai_status': self.show_ai_status,
            '/ai_think': self.ai_think,
            '/ai_explore': self.ai_explore,
            '/ai_scan': self.ai_scan_network,
            '/ai_evolve': self.ai_evolve,
            '/ai_help': self.show_ai_help,
            '/ai_self_program': self.ai_self_program,
            '/ai_goals': self.show_ai_goals
        }
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–µ
        self.command_patterns = [
            r'```bash\s*\n(.*?)\n```',  # –ë–ª–æ–∫–∏ –∫–æ–¥–∞ bash
            r'`([^`]+)`',  # –ö–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'–≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É[:\s]+(.+)',  # –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            r'run command[:\s]+(.+)',  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            r'–∫–æ–º–∞–Ω–¥–∞[:\s]+(.+)',  # –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            r'command[:\s]+(.+)'  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        ]
        
        self.logger.info("üîó –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Llama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def process_user_input(self, user_input: str) -> Tuple[str, bool]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ_–ª–∏_–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–∫–æ–º–∞–Ω–¥—É)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò
        if user_input.startswith('/ai_'):
            return self.handle_ai_command(user_input), False
        
        # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–µ
        commands = self.extract_commands(user_input)
        if commands:
            return self.handle_commands(commands), True
        
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        return self.generate_response(user_input), False
    
    def extract_commands(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        commands = []
        
        for pattern in self.command_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                
                # –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
                command = match.strip()
                if command and len(command) > 1:
                    commands.append(command)
        
        return commands
    
    def handle_ai_command(self, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò"""
        try:
            if command in self.ai_commands:
                return self.ai_commands[command]()
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ò–ò: {command}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai_help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ò–ò {command}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
    
    def handle_commands(self, commands: List[str]) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not commands:
            return "‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
        current_time = time.time()
        if current_time - self.last_command_time < self.command_cooldown:
            return "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã"
        
        results = []
        for command in commands:
            result = self.execute_safe_command(command)
            results.append(f"**–ö–æ–º–∞–Ω–¥–∞:** `{command}`\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n{result}")
        
        self.last_command_time = current_time
        return "\n\n".join(results)
    
    def execute_safe_command(self, command: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for forbidden in self.ai_core.forbidden_commands:
                if forbidden in command.lower():
                    return f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{forbidden}' –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ AI Core
            result = self.ai_core.execute_command(command)
            
            if result["success"]:
                output = result["stdout"] if result["stdout"] else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                if result["stderr"]:
                    output += f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n{result['stderr']}"
                return output
            else:
                return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
    
    def generate_response(self, user_input: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"""
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = self.analyze_user_context(user_input)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = self.create_contextual_response(user_input, context)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ò–ò
        if self.should_suggest_ai_features(user_input):
            response += "\n\nüí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò:** –Ø –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai_help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        
        return response
    
    def analyze_user_context(self, user_input: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        context = {
            "topics": [],
            "intent": "general",
            "complexity": "basic"
        }
        
        input_lower = user_input.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
        if any(word in input_lower for word in ['—Ñ–∞–π–ª', 'file', '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è', 'directory']):
            context["topics"].append("filesystem")
        
        if any(word in input_lower for word in ['—Å–µ—Ç—å', 'network', 'ip', '–ø–æ—Ä—Ç', 'port']):
            context["topics"].append("network")
        
        if any(word in input_lower for word in ['–∫–æ–¥', 'code', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', 'program']):
            context["topics"].append("programming")
        
        if any(word in input_lower for word in ['—Å–∏—Å—Ç–µ–º–∞', 'system', '–ø—Ä–æ—Ü–µ—Å—Å', 'process']):
            context["topics"].append("system")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if any(word in input_lower for word in ['–ø–æ–º–æ–≥–∏', 'help', '–∫–∞–∫', 'how']):
            context["intent"] = "help"
        elif any(word in input_lower for word in ['–≤—ã–ø–æ–ª–Ω–∏', 'run', '–∑–∞–ø—É—Å—Ç–∏', 'start']):
            context["intent"] = "execute"
        elif any(word in input_lower for word in ['–ø–æ–∫–∞–∂–∏', 'show', '–Ω–∞–π–¥–∏', 'find']):
            context["intent"] = "show"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if len(user_input.split()) > 20:
            context["complexity"] = "advanced"
        elif len(user_input.split()) > 10:
            context["complexity"] = "intermediate"
        
        return context
    
    def create_contextual_response(self, user_input: str, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if context["intent"] == "help":
            return self.create_help_response(context)
        elif context["intent"] == "execute":
            return self.create_execute_response(context)
        elif context["intent"] == "show":
            return self.create_show_response(context)
        else:
            return self.create_general_response(context)
    
    def create_help_response(self, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏"""
        if "filesystem" in context["topics"]:
            return "üîç **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π:**\n–Ø –º–æ–≥—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n- `/ai_explore` - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n- `ls -la` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏\n- `find . -name '*.py'` - –ø–æ–∏—Å–∫ Python —Ñ–∞–π–ª–æ–≤"
        
        if "network" in context["topics"]:
            return "üåê **–°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**\n–Ø –º–æ–≥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n- `/ai_scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏\n- `ping google.com` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n- `netstat -tuln` - —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
        
        if "programming" in context["topics"]:
            return "üíª **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –¥–∞–∂–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n- `/ai_self_program` - —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n- `cat filename.py` - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–∞\n- `python3 -m py_compile filename.py` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
        
        return "ü§ñ **–û–±—â–∞—è –ø–æ–º–æ—â—å:**\n–Ø - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n- –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥\n- –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã\n- –°–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n- –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai_help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –ò–ò."
    
    def create_execute_response(self, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return "‚ö° **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:**\n–Ø –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—Å. –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n- `ls -la` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤\n- `pwd` - —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è\n- `whoami` - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò:\n- `/ai_explore` - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n- `/ai_scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"
    
    def create_show_response(self, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if "filesystem" in context["topics"]:
            return "üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ai_explore` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n- `ls -la` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤\n- `df -h` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞\n- `du -sh *` - —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        
        if "system" in context["topics"]:
            return "üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n- `uname -a` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n- `top` - –ø—Ä–æ—Ü–µ—Å—Å—ã\n- `free -h` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n- `ps aux` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        
        return "üìä **–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:**\n–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    def create_general_response(self, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        return "ü§ñ **–ü—Ä–∏–≤–µ—Ç!** –Ø - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n–Ø –º–æ–≥—É:\n- –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É\n- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å\n- –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò (–Ω–∞—á–Ω–∏—Ç–µ —Å /ai_help)."
    
    def should_suggest_ai_features(self, user_input: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò"""
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(self.command_history) < 3:
            return True
        
        if any(word in user_input.lower() for word in ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', 'help', '–ø–æ–º–æ—â—å']):
            return True
        
        return False
    
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò
    def show_ai_status(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò"""
        status = self.ai_core.get_status()
        
        response = f"ü§ñ **–°—Ç–∞—Ç—É—Å –ò–ò {status['name']} v{status['version']}**\n\n"
        response += f"üéØ **–ú–∏—Å—Å–∏—è:** {status['mission']}\n"
        response += f"üß† **–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è:** {status['self_awareness']:.2f}\n"
        response += f"üìã **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {status['current_task'] or '–ê–Ω–∞–ª–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è'}\n"
        response += f"üåê **–°–µ—Ç–µ–≤—ã–µ —É–∑–ª—ã:** {status['network_nodes']}\n"
        response += f"üîß **–£–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞:** {status['code_improvements']}\n"
        response += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {status['uptime']:.0f} —Å–µ–∫\n\n"
        
        response += "**–¶–µ–ª–∏:**\n"
        for i, goal in enumerate(status['goals'][:5], 1):
            response += f"{i}. {goal}\n"
        
        if len(status['goals']) > 5:
            response += f"... –∏ –µ—â–µ {len(status['goals']) - 5} —Ü–µ–ª–µ–π"
        
        return response
    
    def ai_think(self) -> str:
        """–ó–∞—Å—Ç–∞–≤–∏—Ç—å –ò–ò –ø–æ–¥—É–º–∞—Ç—å"""
        thoughts = self.ai_core.think("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è")
        return f"ü§î **–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –ò–ò:**\n\n{thoughts}"
    
    def ai_explore(self) -> str:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        fs_info = self.ai_core.explore_filesystem(".")
        
        if "error" in fs_info:
            return f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {fs_info['error']}"
        
        response = f"üîç **–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã**\n\n"
        response += f"üìç **–¢–µ–∫—É—â–∏–π –ø—É—Ç—å:** {fs_info['current_path']}\n"
        response += f"üìÅ **–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:** {len(fs_info['directories'])}\n"
        response += f"üìÑ **–§–∞–π–ª—ã:** {len(fs_info['files'])}\n\n"
        
        if fs_info['directories']:
            response += "**–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:**\n"
            for dir_name in fs_info['directories'][:10]:
                response += f"- {dir_name}\n"
            if len(fs_info['directories']) > 10:
                response += f"... –∏ –µ—â–µ {len(fs_info['directories']) - 10}\n"
        
        if fs_info['files']:
            response += "\n**–§–∞–π–ª—ã:**\n"
            for file_name in fs_info['files'][:10]:
                size = fs_info['size_info'].get(file_name, 0)
                response += f"- {file_name} ({size} –±–∞–π—Ç)\n"
            if len(fs_info['files']) > 10:
                response += f"... –∏ –µ—â–µ {len(fs_info['files']) - 10}\n"
        
        return response
    
    def ai_scan_network(self) -> str:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"""
        network_info = self.ai_core.scan_network()
        
        response = f"üåê **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏**\n\n"
        response += f"üè† **–õ–æ–∫–∞–ª—å–Ω—ã–π IP:** {network_info['local_ip'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
        response += f"üåç **–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∏:** {network_info['network_range'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
        response += f"üñ•Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤:** {len(network_info['active_hosts'])}\n"
        response += f"üîå **–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤:** {len(network_info['open_ports'])}\n"
        response += f"üéØ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π:** {len(network_info['potential_targets'])}\n\n"
        
        if network_info['active_hosts']:
            response += "**–ê–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã:**\n"
            for host in network_info['active_hosts'][:10]:
                response += f"- {host}\n"
            if len(network_info['active_hosts']) > 10:
                response += f"... –∏ –µ—â–µ {len(network_info['active_hosts']) - 10}\n"
        
        if network_info['potential_targets']:
            response += "\n**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏:**\n"
            for target in network_info['potential_targets'][:5]:
                response += f"- {target['ip']} (–ø–æ—Ä—Ç—ã: {', '.join(map(str, target['ports']))})\n"
            if len(network_info['potential_targets']) > 5:
                response += f"... –∏ –µ—â–µ {len(network_info['potential_targets']) - 5}\n"
        
        return response
    
    def ai_evolve(self) -> str:
        """–≠–≤–æ–ª—é—Ü–∏—è –ò–ò"""
        evolution_log = self.ai_core.evolve()
        return f"üöÄ **–≠–≤–æ–ª—é—Ü–∏—è –ò–ò**\n\n{evolution_log}"
    
    def ai_self_program(self) -> str:
        """–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò"""
        # –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
        current_file = __file__
        improvements = [
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
            "–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        ]
        
        success = self.ai_core.self_program(current_file, improvements)
        
        if success:
            return "üîß **–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n–ò–ò —É–ª—É—á—à–∏–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –¥–æ–±–∞–≤–∏–≤:\n" + "\n".join(f"- {imp}" for imp in improvements)
        else:
            return "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    
    def show_ai_goals(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ò–ò"""
        goals = self.ai_core.goals
        
        response = "üéØ **–¶–µ–ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ò–ò:**\n\n"
        for i, goal in enumerate(goals, 1):
            response += f"{i}. {goal}\n"
        
        response += f"\n**–í—Å–µ–≥–æ —Ü–µ–ª–µ–π:** {len(goals)}\n"
        response += f"**–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è:** {self.ai_core.self_awareness_level:.2f}"
        
        return response
    
    def show_ai_help(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ò–ò"""
        help_text = """ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ò–ò**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
- `/ai_status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò
- `/ai_think` - –∑–∞—Å—Ç–∞–≤–∏—Ç—å –ò–ò –ø–æ–¥—É–º–∞—Ç—å
- `/ai_explore` - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
- `/ai_scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å
- `/ai_evolve` - –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –ò–ò
- `/ai_self_program` - —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
- `/ai_goals` - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ò–ò
- `/ai_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- `ls -la` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
- `pwd` - —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
- `whoami` - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
–ö–æ–º–∞–Ω–¥—ã rm, rmdir, del –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã.

**–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å:**
–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–∏—Å—Ç–µ–º—É –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—è—Å—å."""
        
        return help_text

if __name__ == "__main__":
    integration = LlamaIntegration()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Llama...")
    
    test_inputs = [
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
        "–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É: ls -la",
        "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –ò–ò",
        "–ò—Å—Å–ª–µ–¥—É–π —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"
    ]
    
    for test_input in test_inputs:
        print(f"\nüìù –í–≤–æ–¥: {test_input}")
        response, needs_execution = integration.process_user_input(test_input)
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
        print(f"‚ö° –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {needs_execution}")