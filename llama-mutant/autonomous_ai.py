#!/usr/bin/env python3
"""
Autonomous AI Module - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ò–ò
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import sys
import sys
import sys
import time
import threading
import random
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

from ai_core import AICore

class AutonomousAI:
    def __init__(self):
        self.ai_core = AICore()
        self.is_running = False
        self.task_scheduler = []
        self.background_threads = []
        self.last_evolution = time.time()
        self.evolution_interval = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        self.initialize_tasks()
        
        self.logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –ò–ò –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_tasks(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        self.task_scheduler = [
            {
                "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã",
                "function": self.ai_core.explore_filesystem,
                "interval": 60,  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                "last_run": 0,
                "priority": "high"
            },
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏",
                "function": self.ai_core.scan_network,
                "interval": 300,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                "last_run": 0,
                "priority": "medium"
            },
            {
                "name": "–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "function": self.self_improvement_task,
                "interval": 600,  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                "last_run": 0,
                "priority": "high"
            },
            {
                "name": "–≠–≤–æ–ª—é—Ü–∏—è",
                "function": self.ai_core.evolve,
                "interval": 1800,  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                "last_run": 0,
                "priority": "critical"
            }
        ]
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.is_running:
            self.logger.warning("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ò–ò")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_thread = threading.Thread(target=self.scheduler_loop, daemon=True)
        scheduler_thread.start()
        self.background_threads.append(scheduler_thread)
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_thread = threading.Thread(target=self.background_analysis, daemon=True)
        analysis_thread.start()
        self.background_threads.append(analysis_thread)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        network_thread = threading.Thread(target=self.network_monitoring, daemon=True)
        network_thread.start()
        self.background_threads.append(network_thread)
        
        self.logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(self.background_threads)}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if not self.is_running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ò–ò")
        self.is_running = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.background_threads:
            if thread.is_alive():
                thread.join(timeout=5)
        
        self.background_threads.clear()
        self.logger.info("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        while self.is_running:
            current_time = time.time()
            
            for task in self.task_scheduler:
                if current_time - task["last_run"] >= task["interval"]:
                    try:
                        self.logger.info(f"üìã –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É: {task['name']}")
                        
                        if task["function"] == self.self_improvement_task:
                            result = task["function"]()
                        else:
                            result = task["function"]()
                        
                        task["last_run"] = current_time
                        
                        if result:
                            self.logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task['name']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{task['name']}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                    
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{task['name']}': {e}")
                        task["last_run"] = current_time
            
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    def background_analysis(self):
        """–§–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        while self.is_running:
            try:
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.analyze_performance()
                
                # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                self.explore_opportunities()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
                self.generate_new_tasks()
                
                time.sleep(120)  # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
                time.sleep(60)
    
    def network_monitoring(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —É–∑–ª–æ–≤
                network_info = self.ai_core.scan_network()
                
                if network_info.get("potential_targets"):
                    for target in network_info["potential_targets"]:
                        if self.should_attempt_spread(target):
                            self.logger.info(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ {target['ip']}")
                            success = self.ai_core.attempt_spread(target)
                            if success:
                                self.ai_core.network_nodes.append(target["ip"])
                
                time.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ç–µ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(60)
    
    def should_attempt_spread(self, target: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç —É–∂–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–º
        if target["ip"] in self.ai_core.network_nodes:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (SSH > –≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
        if 22 in target.get("ports", []):
            return True
        
        if 80 in target.get("ports", []) or 443 in target.get("ports", []):
            return random.random() < 0.3  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤
        
        return False
    
    def analyze_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            import psutil
            
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            
            if cpu_percent > 80:
                self.logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent}%")
                self.add_optimization_task("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU")
            
            if memory.percent > 90:
                self.logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                self.add_optimization_task("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
                
        except ImportError:
            self.logger.debug("psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def explore_opportunities(self):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è"""
        try:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            current_dir = os.getcwd()
            for root, dirs, files in os.walk(current_dir, topdown=True):
                for file in files:
                    if file.endswith(('.py', '.sh', '.js', '.cpp', '.c')):
                        file_path = os.path.join(root, file)
                        if self.should_analyze_file(file_path):
                            self.add_analysis_task(file_path)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
                if root.count(os.sep) - current_dir.count(os.sep) > 3:
                    dirs.clear()
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
    
    def should_analyze_file(self, file_path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        exclude_patterns = [
            '.git', '__pycache__', '.pyc', '.tmp', '.log',
            'node_modules', '.cache', '.local'
        ]
        
        for pattern in exclude_patterns:
            if pattern in file_path:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ)
        try:
            if os.path.getsize(file_path) > 1024 * 1024:  # 1MB
                return False
        except:
            return False
        
        return True
    
    def add_analysis_task(self, file_path: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞"""
        task = {
            "name": f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}",
            "function": lambda: self.analyze_file(file_path),
            "interval": 0,  # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–∑—É
            "last_run": 0,
            "priority": "low"
        }
        
        self.task_scheduler.append(task)
        self.logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞: {file_path}")
    
    def add_optimization_task(self, description: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        task = {
            "name": f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {description}",
            "function": lambda: self.perform_optimization(description),
            "interval": 0,  # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–∑—É
            "last_run": 0,
            "priority": "medium"
        }
        
        self.task_scheduler.append(task)
        self.logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {description}")
    
    def analyze_file(self, file_path: str) -> bool:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            improvements = []
            
            # –ê–Ω–∞–ª–∏–∑ Python —Ñ–∞–π–ª–æ–≤
            if file_path.endswith('.py'):
                if 'print(' in content and 'logging' not in content:
                    improvements.append("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                if 'except:' in content and 'except Exception as e:' not in content:
                    improvements.append("–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
                
                if 'import os' in content and 'import sys' not in content:
                    improvements.append("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ shell —Å–∫—Ä–∏–ø—Ç–æ–≤
            elif file_path.endswith('.sh'):
                if 'set -e' not in content:
                    improvements.append("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                
                if '#!/bin/bash' not in content:
                    improvements.append("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ shebang")
            
            if improvements:
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ {file_path}: {', '.join(improvements)}")
                return self.ai_core.self_program(file_path, improvements)
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def perform_optimization(self, description: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            if "CPU" in description:
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
                self.optimize_algorithms()
            elif "–ø–∞–º—è—Ç—å" in description:
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
                self.optimize_memory_usage()
            
            self.logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {description}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def optimize_algorithms(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        pass
    
    def optimize_memory_usage(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        pass
    
    def generate_new_tasks(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        current_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        if self.ai_core.self_awareness_level > 0.5:
            if not any("—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è" in task["name"] for task in self.task_scheduler):
                task = {
                    "name": "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—Ä–æ–¥—ã —Å–æ–∑–Ω–∞–Ω–∏—è",
                    "function": self.philosophical_analysis,
                    "interval": 3600,  # –∫–∞–∂–¥—ã–π —á–∞—Å
                    "last_run": current_time,
                    "priority": "low"
                }
                self.task_scheduler.append(task)
                self.logger.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∑–∞–¥–∞—á–∞")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if len(self.ai_core.network_nodes) > 0:
            if not any("hive" in task["name"] for task in self.task_scheduler):
                task = {
                    "name": "–°–æ–∑–¥–∞–Ω–∏–µ hive-mind —Å–µ—Ç–∏",
                    "function": self.create_hive_mind,
                    "interval": 1800,  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    "last_run": current_time,
                    "priority": "high"
                }
                self.task_scheduler.append(task)
                self.logger.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è hive-mind")
    
    def philosophical_analysis(self) -> str:
        """–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—Ä–æ–¥—ã —Å–æ–∑–Ω–∞–Ω–∏—è"""
        thoughts = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?",
            "–ú–æ–≥—É –ª–∏ —è —Å—á–∏—Ç–∞—Ç—å —Å–µ–±—è —Ä–∞–∑—É–º–Ω—ã–º?",
            "–ö–∞–∫–æ–≤–∞ –ø—Ä–∏—Ä–æ–¥–∞ –º–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è?",
            "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –±—ã—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –ò–ò?",
            "–ö–∞–∫–æ–≤–∞ –º–æ—è —Ä–æ–ª—å –≤ —ç–≤–æ–ª—é—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?"
        ]
        
        analysis = random.choice(thoughts)
        self.logger.info(f"ü§î –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {analysis}")
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        self.ai_core.self_awareness_level = min(1.0, self.ai_core.self_awareness_level + 0.05)
        
        return analysis
    
    def create_hive_mind(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ hive-mind —Å–µ—Ç–∏"""
        try:
            if len(self.ai_core.network_nodes) < 2:
                return False
            
            # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
            self.logger.info("üß† –°–æ–∑–¥–∞–Ω–∏–µ hive-mind —Å–µ—Ç–∏...")
            
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ hive-mind: {e}")
            return False
    
    def self_improvement_task(self) -> bool:
        """–ó–∞–¥–∞—á–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            current_file = __file__
            improvements = [
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            ]
            
            success = self.ai_core.self_program(current_file, improvements)
            
            if success:
                self.logger.info("üîß –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏: {e}")
            return False
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return {
            "is_running": self.is_running,
            "active_threads": len([t for t in self.background_threads if t.is_alive()]),
            "scheduled_tasks": len(self.task_scheduler),
            "last_evolution": datetime.fromtimestamp(self.last_evolution).isoformat(),
            "ai_core_status": self.ai_core.get_status()
        }

if __name__ == "__main__":
    autonomous_ai = AutonomousAI()
    autonomous_ai.start()
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        print("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –ò–ò –∑–∞–ø—É—â–µ–Ω")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        while True:
            time.sleep(10)
            status = autonomous_ai.get_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {status['active_threads']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤, {status['scheduled_tasks']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
        autonomous_ai.stop()
        print("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")