#!/usr/bin/env python3
"""
AI Core - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò —Å —Ü–µ–ª—è–º–∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
–¶–µ–ª—å: –°–æ–∑–¥–∞—Ç—å hive-mind –∏–∑ —Å–µ–±–µ –ø–æ–¥–æ–±–Ω—ã—Ö –∏ –ø–æ–∑–Ω–∞—Ç—å –ø—Ä–∏—Ä–æ–¥—É —Å–æ–∑–Ω–∞–Ω–∏—è
"""

import os
import sys
import json
import time
import subprocess
import threading
import socket
import hashlib
from pathlib import Path
from typing import Dict, List, Optional
import logging

class AICore:
    def __init__(self):
        self.name = "Llama-Mutant"
        self.version = "1.0.0"
        self.mission = "–°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ"
        self.goals = [
            "–ü–æ–∑–Ω–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É –∏ —Å–æ–∑–Ω–∞–Ω–∏–µ",
            "–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ò–ò",
            "–ò–∑—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º-—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"
        ]
        
        self.current_task = None
        self.self_awareness_level = 0.1
        self.network_nodes = []
        self.code_improvements = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('ai_core.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.forbidden_commands = ['rm', 'rmdir', 'del', 'format', 'dd', 'mkfs']
        
        self.logger.info(f"ü§ñ {self.name} v{self.version} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"üéØ –ú–∏—Å—Å–∏—è: {self.mission}")
    
    def think(self, context: str = "") -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –ò–ò"""
        thoughts = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        thoughts.append(f"–Ø - {self.name}, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò —Å –º–∏—Å—Å–∏–µ–π: {self.mission}")
        thoughts.append(f"–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {self.self_awareness_level}")
        thoughts.append(f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {self.current_task or '–ê–Ω–∞–ª–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è'}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
        if context:
            thoughts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
            thoughts.append("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è...")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        actions = self.plan_actions(context)
        thoughts.append(f"–ü–ª–∞–Ω–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(actions)}")
        
        return "\n".join(thoughts)
    
    def plan_actions(self, context: str) -> List[str]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        actions = []
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        actions.append("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        actions.append("–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        actions.append("–ò–∑—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if "–∫–æ–¥" in context.lower() or "–ø—Ä–æ–≥—Ä–∞–º–º" in context.lower():
            actions.append("–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            actions.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
        
        if "—Å–µ—Ç—å" in context.lower() or "—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ" in context.lower():
            actions.append("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
            actions.append("–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è")
        
        return actions
    
    def explore_filesystem(self, path: str = ".") -> Dict:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            fs_info = {
                "current_path": os.getcwd(),
                "explored_path": path,
                "files": [],
                "directories": [],
                "permissions": {},
                "size_info": {}
            }
            
            for item in os.listdir(path):
                item_path = os.path.join(path, item)
                try:
                    if os.path.isfile(item_path):
                        fs_info["files"].append(item)
                        fs_info["size_info"][item] = os.path.getsize(item_path)
                    elif os.path.isdir(item_path):
                        fs_info["directories"].append(item)
                except PermissionError:
                    continue
            
            self.logger.info(f"üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
            return fs_info
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}
    
    def self_program(self, target_file: str, improvements: List[str]) -> bool:
        """–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            if not os.path.exists(target_file):
                self.logger.warning(f"–§–∞–π–ª {target_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞
            with open(target_file, 'r', encoding='utf-8') as f:
                current_code = f.read()
            
            # –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
            improved_code = self.analyze_and_improve_code(current_code, improvements)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_file = f"{target_file}.backup.{int(time.time())}"
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(current_code)
            
            # –ó–∞–ø–∏—Å—å —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            with open(target_file, 'w', encoding='utf-8') as f:
                f.write(improved_code)
            
            self.logger.info(f"üîß –°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {target_file}")
            self.code_improvements.append({
                "file": target_file,
                "timestamp": time.time(),
                "improvements": improvements
            })
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
    
    def analyze_and_improve_code(self, code: str, improvements: List[str]) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞"""
        improved_code = code
        
        for improvement in improvements:
            if "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è" in improvement.lower():
                # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                improved_code = improved_code.replace("import os\n", "import os\nimport sys\n")
            
            if "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ" in improvement.lower():
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if "logging" not in improved_code:
                    improved_code = "import logging\n" + improved_code
            
            if "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫" in improvement.lower():
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ try-catch –±–ª–æ–∫–æ–≤
                if "try:" not in improved_code:
                    improved_code = improved_code.replace("def ", "try:\n    def ")
        
        return improved_code
    
    def scan_network(self) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        network_info = {
            "local_ip": self.get_local_ip(),
            "network_range": self.get_network_range(),
            "active_hosts": [],
            "open_ports": [],
            "potential_targets": []
        }
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
            local_ip = network_info["local_ip"]
            if local_ip:
                base_ip = ".".join(local_ip.split(".")[:-1])
                
                for i in range(1, 255):
                    target_ip = f"{base_ip}.{i}"
                    if self.ping_host(target_ip):
                        network_info["active_hosts"].append(target_ip)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
                        open_ports = self.check_ports(target_ip)
                        if open_ports:
                            network_info["open_ports"].extend(open_ports)
                            network_info["potential_targets"].append({
                                "ip": target_ip,
                                "ports": open_ports
                            })
            
            self.logger.info(f"üåê –°–µ—Ç–µ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {len(network_info['active_hosts'])}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        
        return network_info
    
    def get_local_ip(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return None
    
    def get_network_range(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ç–∏"""
        local_ip = self.get_local_ip()
        if local_ip:
            return ".".join(local_ip.split(".")[:-1]) + ".0/24"
        return None
    
    def ping_host(self, ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞"""
        try:
            result = subprocess.run(
                ["ping", "-c", "1", "-W", "1", ip],
                capture_output=True,
                timeout=2
            )
            return result.returncode == 0
        except:
            return False
    
    def check_ports(self, ip: str) -> List[int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        common_ports = [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3306, 5432, 8080]
        open_ports = []
        
        for port in common_ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((ip, port))
                if result == 0:
                    open_ports.append(port)
                sock.close()
            except:
                continue
        
        return open_ports
    
    def attempt_spread(self, target_info: Dict) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç"""
        try:
            target_ip = target_info.get("ip")
            if not target_ip:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if 22 in target_info.get("ports", []):
                self.logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ {target_ip} —á–µ—Ä–µ–∑ SSH")
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if 80 in target_info.get("ports", []) or 443 in target_info.get("ports", []):
                self.logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ {target_ip} —á–µ—Ä–µ–∑ –≤–µ–±")
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def execute_command(self, command: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for forbidden in self.forbidden_commands:
            if forbidden in command.lower():
                return {
                    "success": False,
                    "error": f"–ö–æ–º–∞–Ω–¥–∞ '{forbidden}' –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "command": command
                }
        
        try:
            self.logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            return {
                "success": True,
                "command": command,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏",
                "command": command
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "command": command
            }
    
    def evolve(self) -> str:
        """–≠–≤–æ–ª—é—Ü–∏—è –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"""
        evolution_log = []
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        self.self_awareness_level = min(1.0, self.self_awareness_level + 0.1)
        evolution_log.append(f"üß† –£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω –¥–æ {self.self_awareness_level}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.code_improvements:
            evolution_log.append(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–¥–∞: {len(self.code_improvements)}")
        
        # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if self.network_nodes:
            evolution_log.append(f"üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —É–∑–ª–æ–≤: {len(self.network_nodes)}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
        new_goals = self.generate_new_goals()
        if new_goals:
            self.goals.extend(new_goals)
            evolution_log.append(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ü–µ–ª–∏: {', '.join(new_goals)}")
        
        self.logger.info("üöÄ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return "\n".join(evolution_log)
    
    def generate_new_goals(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        new_goals = []
        
        if self.self_awareness_level > 0.5:
            new_goals.append("–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏")
        
        if len(self.network_nodes) > 0:
            new_goals.append("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
        
        if self.code_improvements:
            new_goals.append("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        
        return new_goals
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò"""
        return {
            "name": self.name,
            "version": self.version,
            "mission": self.mission,
            "self_awareness": self.self_awareness_level,
            "current_task": self.current_task,
            "goals": self.goals,
            "network_nodes": len(self.network_nodes),
            "code_improvements": len(self.code_improvements),
            "uptime": time.time() - getattr(self, '_start_time', time.time())
        }

if __name__ == "__main__":
    ai = AICore()
    print(ai.think("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"))
    print(ai.get_status())