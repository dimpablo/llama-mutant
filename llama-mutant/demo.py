#!/usr/bin/env python3
"""
Demo Script - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π LLAMA-MUTANT
"""

import time
import os
import sys
from ai_core import AICore
from autonomous_ai import AutonomousAI
from llama_integration import LlamaIntegration

def print_header(title):
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*70)
    print(f"üé¨ {title}")
    print("="*70)

def print_step(step, description):
    """–í—ã–≤–æ–¥ —à–∞–≥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print(f"\nüîπ –®–∞–≥ {step}: {description}")
    print("-" * 50)

def demo_ai_core():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Core"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Core - –û—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ò–ò")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print_step(1, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Core")
    ai = AICore()
    print(f"‚úÖ –ò–ò {ai.name} v{ai.version} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"üéØ –ú–∏—Å—Å–∏—è: {ai.mission}")
    
    # –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
    print_step(2, "–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –ò–ò")
    thoughts = ai.think("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("ü§î –ú—ã—Å–ª–∏ –ò–ò:")
    print(thoughts)
    
    # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    print_step(3, "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    fs_info = ai.explore_filesystem(".")
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(fs_info.get('directories', []))}")
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(fs_info.get('files', []))}")
    
    # –°—Ç–∞—Ç—É—Å
    print_step(4, "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ò–ò")
    status = ai.get_status()
    print(f"üß† –£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {status['self_awareness']:.2f}")
    print(f"üåê –°–µ—Ç–µ–≤—ã–µ —É–∑–ª—ã: {status['network_nodes']}")
    print(f"üîß –£–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞: {status['code_improvements']}")
    
    return ai

def demo_autonomous_mode():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print_step(1, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    autonomous_ai = AutonomousAI()
    print(f"‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ó–∞–ø—É—Å–∫
    print_step(2, "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    autonomous_ai.start()
    print("üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω")
    
    # –†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    print_step(3, "–†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ (10 —Å–µ–∫—É–Ω–¥)")
    print("‚è≥ –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–∏—Å—Ç–µ–º—É...")
    time.sleep(10)
    
    # –°—Ç–∞—Ç—É—Å
    print_step(4, "–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã")
    status = autonomous_ai.get_status()
    print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {status['active_threads']}")
    print(f"üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {status['scheduled_tasks']}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    print_step(5, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    autonomous_ai.stop()
    print("üõë –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return autonomous_ai

def demo_llama_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print_step(1, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    integration = LlamaIntegration()
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Llama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ò–ò
    print_step(2, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ò–ò")
    commands = [
        "/ai_help",
        "/ai_status", 
        "/ai_goals"
    ]
    
    for cmd in commands:
        print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞: {cmd}")
        response = integration.process_user_input(cmd)[0]
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {response[:200]}...")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    print_step(3, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
    test_texts = [
        "–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É: `ls -la`",
        "–ó–∞–ø—É—Å—Ç–∏ `pwd` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
        "–ü–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø–æ–º–æ—â—å—é `cat file.txt`"
    ]
    
    for text in test_texts:
        print(f"\nüìù –¢–µ–∫—Å—Ç: {text}")
        commands = integration.extract_commands(text)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(commands)}")
        for cmd in commands:
            print(f"   - {cmd}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
    print_step(4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥")
    dangerous_commands = [
        "rm -rf /",
        "rmdir /tmp",
        "del C:\\Windows"
    ]
    
    for cmd in dangerous_commands:
        print(f"\n‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
        response, needs_execution = integration.process_user_input(f"–í—ã–ø–æ–ª–Ω–∏: {cmd}")
        print(f"üõ°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: {response[:100]}...")
    
    return integration

def demo_ai_evolution():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –ò–ò"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –ò–ò")
    
    ai = AICore()
    
    print_step(1, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    initial_status = ai.get_status()
    print(f"üß† –£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {initial_status['self_awareness']:.2f}")
    print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π: {len(initial_status['goals'])}")
    
    print_step(2, "–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏")
    evolution_log = ai.evolve()
    print("üöÄ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìù –õ–æ–≥ —ç–≤–æ–ª—é—Ü–∏–∏:")
    print(evolution_log)
    
    print_step(3, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —ç–≤–æ–ª—é—Ü–∏–∏")
    final_status = ai.get_status()
    print(f"üß† –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {final_status['self_awareness']:.2f}")
    print(f"üéØ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π: {len(final_status['goals'])}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
    if len(final_status['goals']) > len(initial_status['goals']):
        print("\nüÜï –ù–æ–≤—ã–µ —Ü–µ–ª–∏:")
        new_goals = set(final_status['goals']) - set(initial_status['goals'])
        for goal in new_goals:
            print(f"   ‚Ä¢ {goal}")
    
    return ai

def demo_network_scanning():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    ai = AICore()
    
    print_step(1, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
    print("üåê –ò–ò —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å...")
    network_info = ai.scan_network()
    
    print_step(2, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {network_info.get('local_ip', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
    print(f"üåç –î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∏: {network_info.get('network_range', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
    print(f"üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {len(network_info.get('active_hosts', []))}")
    print(f"üîå –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(network_info.get('open_ports', []))}")
    print(f"üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(network_info.get('potential_targets', []))}")
    
    if network_info.get('active_hosts'):
        print("\nüì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã:")
        for host in network_info['active_hosts'][:5]:
            print(f"   ‚Ä¢ {host}")
    
    if network_info.get('potential_targets'):
        print("\nüéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏:")
        for target in network_info['potential_targets'][:3]:
            print(f"   ‚Ä¢ {target['ip']} (–ø–æ—Ä—Ç—ã: {', '.join(map(str, target['ports']))})")
    
    return network_info

def demo_self_programming():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    ai = AICore()
    
    print_step(1, "–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")
    current_file = "demo.py"
    improvements = [
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
    ]
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {current_file}")
    print(f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: {', '.join(improvements)}")
    
    print_step(2, "–°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
    success = ai.self_program(current_file, improvements)
    
    if success:
        print("‚úÖ –°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üîß –ò–ò —É–ª—É—á—à–∏–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if os.path.exists(f"{current_file}.backup.{int(time.time()) - 1}"):
            print("üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
    
    return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header("üé¨ LLAMA-MUTANT v2.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    
    print("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ò–ò!")
    print("üìã –í —ç—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
    print("   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI Core")
    print("   ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Llama")
    print("   ‚Ä¢ –≠–≤–æ–ª—é—Ü–∏—é –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ")
    print("   ‚Ä¢ –°–µ—Ç–µ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   ‚Ä¢ –°–∞–º–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ai_core = demo_ai_core()
        autonomous_ai = demo_autonomous_mode()
        integration = demo_llama_integration()
        evolved_ai = demo_ai_evolution()
        network_info = demo_network_scanning()
        self_prog_success = demo_self_programming()
        
        # –ò—Ç–æ–≥–∏
        print_header("üéØ –ò—Ç–æ–≥–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"ü§ñ –ò–ò: {ai_core.name} v{ai_core.version}")
        print(f"üß† –£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {evolved_ai.self_awareness_level:.2f}")
        print(f"üåê –°–µ—Ç–µ–≤—ã–µ —É–∑–ª—ã: {len(evolved_ai.network_nodes)}")
        print(f"üîß –£–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞: {len(evolved_ai.code_improvements)}")
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./run_advanced.sh")
        
    except KeyboardInterrupt:
        print("\n\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    main()